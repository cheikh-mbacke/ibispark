"""migrate_to_mysql

Revision ID: b65ae1c80db7
Revises: 
Create Date: 2025-05-21 14:28:51.203499

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b65ae1c80db7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('hotels',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_hotels_id'), 'hotels', ['id'], unique=False)
    op.create_index(op.f('ix_hotels_name'), 'hotels', ['name'], unique=True)
    op.create_table('spot_type',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_spot_type_id'), 'spot_type', ['id'], unique=False)
    op.create_index(op.f('ix_spot_type_value'), 'spot_type', ['value'], unique=True)
    op.create_table('statuses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('value', sa.String(length=255), nullable=True),
    sa.Column('color', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_statuses_id'), 'statuses', ['id'], unique=False)
    op.create_index(op.f('ix_statuses_value'), 'statuses', ['value'], unique=True)
    op.create_table('parkings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('hotel_id', sa.Integer(), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('total_capacity', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['hotel_id'], ['hotels.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parkings_id'), 'parkings', ['id'], unique=False)
    op.create_index(op.f('ix_parkings_name'), 'parkings', ['name'], unique=False)
    op.create_table('parking_spots',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.Column('parking_id', sa.Integer(), nullable=True),
    sa.Column('length', sa.Float(), nullable=True),
    sa.Column('width', sa.Float(), nullable=True),
    sa.Column('height', sa.Float(), nullable=True),
    sa.Column('surface', sa.Float(), nullable=True),
    sa.Column('floor', sa.Integer(), nullable=True),
    sa.Column('section', sa.String(length=255), nullable=True),
    sa.Column('address', sa.String(length=255), nullable=True),
    sa.Column('electric_charging', sa.Boolean(), nullable=True),
    sa.Column('camera', sa.Boolean(), nullable=True),
    sa.Column('sensor', sa.Boolean(), nullable=True),
    sa.Column('hourly_rate', sa.Float(), nullable=True),
    sa.Column('daily_rate', sa.Float(), nullable=True),
    sa.Column('monthly_rate', sa.Float(), nullable=True),
    sa.Column('pictures', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['parking_id'], ['parkings.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_parking_spots_id'), 'parking_spots', ['id'], unique=False)
    op.create_index(op.f('ix_parking_spots_number'), 'parking_spots', ['number'], unique=False)
    op.create_table('spot_statuses',
    sa.Column('spot_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['spot_id'], ['parking_spots.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['statuses.id'], ),
    sa.PrimaryKeyConstraint('spot_id', 'status_id')
    )
    op.create_table('spot_types',
    sa.Column('spot_id', sa.Integer(), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['spot_id'], ['parking_spots.id'], ),
    sa.ForeignKeyConstraint(['type_id'], ['spot_type.id'], ),
    sa.PrimaryKeyConstraint('spot_id', 'type_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('spot_types')
    op.drop_table('spot_statuses')
    op.drop_index(op.f('ix_parking_spots_number'), table_name='parking_spots')
    op.drop_index(op.f('ix_parking_spots_id'), table_name='parking_spots')
    op.drop_table('parking_spots')
    op.drop_index(op.f('ix_parkings_name'), table_name='parkings')
    op.drop_index(op.f('ix_parkings_id'), table_name='parkings')
    op.drop_table('parkings')
    op.drop_index(op.f('ix_statuses_value'), table_name='statuses')
    op.drop_index(op.f('ix_statuses_id'), table_name='statuses')
    op.drop_table('statuses')
    op.drop_index(op.f('ix_spot_type_value'), table_name='spot_type')
    op.drop_index(op.f('ix_spot_type_id'), table_name='spot_type')
    op.drop_table('spot_type')
    op.drop_index(op.f('ix_hotels_name'), table_name='hotels')
    op.drop_index(op.f('ix_hotels_id'), table_name='hotels')
    op.drop_table('hotels')
    # ### end Alembic commands ###
